# -*- coding: utf-8 -*-
"""A5_task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xpw631Njz6Vy6GbrQr6m6ojJXSAuG-lm
"""

import numpy as np
import matplotlib.pyplot as plt

# Parameters
a = 2           # Outer radius
r_inner = 1     # Inner radius (a/2)
T_inside = 0    # Temperature at r=r_inner
T_outside = 200 # Temperature at r=a
n_nodes = 10    # Number of nodes

# Radius values from r_inner to a
r_values = np.linspace(r_inner, a, n_nodes)

# Step size
dr = (a - r_inner) / (n_nodes - 1)

# Numerical Solution Setup
A = np.zeros((n_nodes, n_nodes))
b = np.zeros(n_nodes)

# Construct finite difference matrix for BVP
for i in range(1, n_nodes - 1):
    A[i, i-1] = 1 / (dr**2) - 1 / (2 * r_values[i] * dr)
    A[i, i] = -2 / (dr**2)
    A[i, i+1] = 1 / (dr**2) + 1 / (2 * r_values[i] * dr)

# Boundary conditions
A[0, 0] = 1
A[-1, -1] = 1
b[0] = T_inside
b[-1] = T_outside

# Solve for the temperature distribution
T_numeric = np.linalg.solve(A, b)

# Analytical Solution (corrected range)
T_analytical = T_outside * (1 - np.log(r_values / a) / np.log(0.5))

# Plotting the results
plt.figure(figsize=(10, 6))
plt.plot(r_values, T_numeric, label="Numerical Solution (Finite Difference)", marker='o', linestyle='--')
plt.plot(r_values, T_analytical, label="Analytical Solution", color="orange")
plt.xlabel("Radius (r)")
plt.ylabel("Temperature (Â°C)")
plt.title("Temperature Profile in the Cylinder")
plt.legend()
plt.grid(True)

# Save and display the figure
plt.savefig("a5task3.png")
plt.show()